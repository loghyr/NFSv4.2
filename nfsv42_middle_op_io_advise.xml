<!-- Copyright (C) The IETF Trust (2011-2012) -->
<!-- Copyright (C) The Internet Society (2011-2012) -->

<section anchor='op:io_advise' title='Operation 63: IO_ADVISE - Application I/O access pattern hints'>
  <section toc='exclude' title="ARGUMENT">
   <?rfc include='autogen/io_advise_args.xml'?>
  </section>

  <section toc='exclude' title="RESULT">
    <?rfc include='autogen/io_advise_res.xml'?>
  </section>

  <section toc='exclude' title="DESCRIPTION">
    <t>
      The IO_ADVISE operation sends an I/O access pattern hint to the
      server for the owner of the stateid for a given byte range specified by
      iar_offset and iar_count.  The byte range specified by iar_offset and iar_count need
      not currently exist in the file, but the iar_hints will apply to the byte
      range when it does exist.  If iar_count is 0, all data following
      iar_offset is specified.  The server MAY ignore the advice.
    </t>

    <t>
      The following are the allowed hints for a stateid holder:
    </t>

    <t>
      <list style='hanging'>
        <t hangText='IO_ADVISE4_NORMAL'>
          There is no advice to give, this is the default behavior.
        </t>

        <t hangText='IO_ADVISE4_SEQUENTIAL'>
          Expects to access the specified data sequentially from lower offsets to
          higher offsets.
        </t>

        <t hangText='IO_ADVISE4_SEQUENTIAL_BACKWARDS'>
          Expects to access the specified data sequentially from higher
          offsets to lower offsets.
        </t>

        <t hangText='IO_ADVISE4_RANDOM'>
          Expects to access the specified data in a random order.
        </t>

        <t hangText='IO_ADVISE4_WILLNEED'>
          Expects to access the specified data in the near future.
        </t>

        <t hangText='IO_ADVISE4_WILLNEED_OPPORTUNISTIC'>
          Expects to possibly access the data in the near future.
          This is a speculative hint, and therefore the server should
          prefetch data or indirect blocks only if it can be done at a
          marginal cost.
        </t>

        <t hangText='IO_ADVISE_DONTNEED'>
          Expects that it will not access the specified data in the near future.
        </t>

        <t hangText='IO_ADVISE_NOREUSE'>
          Expects to access the specified data once and then not reuse it thereafter.
        </t>

        <t hangText='IO_ADVISE4_READ'>
          Expects to read the specified data in the near future.
        </t>

        <t hangText='IO_ADVISE4_WRITE'>
          Expects to write the specified data in the near future.
        </t>

        <t hangText = 'IO_ADVISE4_INIT_PROXIMITY'>
          Informs the server that the data in the byte range remains important
          to the client.
        </t>
      </list>
    </t>

    <t>
      Since IO_ADVISE is a hint, a server SHOULD NOT return an
      error and invalidate a entire Compound request if one of
      the sent hints in iar_hints is not supported by the server.  Also, the
      server MUST NOT return an error if the client sends
      contradictory hints to the server, e.g.,
      IO_ADVISE4_SEQUENTIAL and IO_ADVISE4_RANDOM in a single
      IO_ADVISE operation.  In these cases, the server MUST
      return success and a ior_hints value that indicates
      the hint it intends to implement. This may mean simply
      returning IO_ADVISE4_NORMAL.
    </t>

    <t>
      The ior_hints returned by the server is primarily for debugging
      purposes since the server is under no obligation to carry out the
      hints that it describes in the ior_hints result.  In addition, while
      the server may have intended to implement the hints returned in
      ior_hints, as time progresses, the server may need to change its
      handling of a given file due to several reasons including, but not
      limited to, memory pressure, additional IO_ADVISE hints sent by other
      clients, and heuristically detected file access patterns.
    </t>

    <t>
      The server MAY return different advice than what the client
      requested.  If it does, then this might be due to one of several
      conditions, including, but not limited to another client advising of
      a different I/O access pattern; a different I/O access pattern from
      another client that that the server has heuristically detected; or
      the server is not able to support the requested I/O access pattern,
      perhaps due to a temporary resource limitation.
    </t>

    <t>
      Each issuance of the IO_ADVISE operation overrides all previous
      issuances of IO_ADVISE for a given byte range.  This effectively
      follows a strategy of last hint wins for a given stateid and byte
      range.
    </t>

    <t>
      Clients should assume that hints included in an IO_ADVISE operation
      will be forgotten once the file is closed.
    </t>
  </section>

  <section toc='exclude' title="IMPLEMENTATION">
    <t>
      The NFS client may choose to issue an IO_ADVISE operation to the
      server in several different instances.
    </t>

    <t>
      The most obvious is in direct response to an application's execution
      of posix_fadvise().  In this case, IO_ADVISE4_WRITE and IO_ADVISE4_READ
      may be set based upon the type of file access specified when the file
      was opened.
    </t>
  </section>

  <section toc='exclude' title="IO_ADVISE4_INIT_PROXIMITY">
    <t>
      The IO_ADVISE4_INIT_PROXIMITY hint is non-posix in origin and
      can be used to convey that the client has recently accessed
      the byte range in its own cache. I.e., it has not accessed
      it on the server, but it has locally.  When the server reaches
      resource exhaustion, knowing which data is more important
      allows the server to make better choices about which data to,
      for example purge from a cache, or move to secondary storage.
      It also informs the server which delegations are more important,
      since if delegations are working correctly, once delegated
      to a client and the client has read the content for that byte
      range, a server might never receive another read request for
      that byte range.
    </t>

    <t>
      The IO_ADVISE4_INIT_PROXIMITY hint can also be used in a pNFS
      setting to let the client inform the metadata server as to
      the I/O statistics between the client and the storage devices.
      The metadata server is then free to use this information
      about client I/O to optimize the data storage location.
    </t>

    <t>
      This hint is also useful in the case of NFS clients which are
      network booting from a server. If the first client to be booted
      sends this hint, then it keeps the cache warm for the remaining
      clients.
    </t>
  </section>

  <section toc='exclude' title="pNFS File Layout Data Type Considerations">
    <t>
      The IO_ADVISE considerations for pNFS are very similar to the COMMIT
      considerations for pNFS. That is, as with COMMIT, some NFS server
      implementations prefer IO_ADVISE be done on the DS, and some prefer
      it be done on the MDS.
    </t>

    <t>
      For the file's layout type, it is proposed that NFSv4.2 include
      an additional hint NFL42_CARE_IO_ADVISE_THRU_MDS which is
      valid only on metadata servers running NFSv4.2 or higher.
      Any file's layout obtained from a NFSv4.1 metadata server
      MUST NOT have NFL42_UFLG_IO_ADVISE_THRU_MDS set.  Any file's
      layout obtained with a NFSv4.2 metadata server MAY have
      NFL42_UFLG_IO_ADVISE_THRU_MDS set. However, if the layout
      utilizes NFSv4.1 storage devices, the IO_ADVISE operation
      cannot be sent to them.
    </t>

    <t>
      If NFL42_UFLG_IO_ADVISE_THRU_MDS is set, the client MUST send
      the IO_ADVISE operation to the MDS in order for it to be
      honored by the DS.  Once the MDS receives the IO_ADVISE
      operation, it will communicate the advice to each DS.
    </t>

    <t>
      If NFL42_UFLG_IO_ADVISE_THRU_MDS is not set, then the client
      SHOULD send an IO_ADVISE operation to the appropriate DS for
      the specified byte range.  While the client MAY always send
      IO_ADVISE to the MDS, if the server has not set
      NFL42_UFLG_IO_ADVISE_THRU_MDS, the client should expect that
      such an IO_ADVISE is futile. Note that a client SHOULD use
      the same set of arguments on each IO_ADVISE sent to a DS for
      the same open file reference.
    </t>

    <t>
      The server is not required to support different advice for different
      DS's with the same open file reference.
    </t>

    <section toc='exclude' title="Dense and Sparse Packing Considerations">
      <t>
        The IO_ADVISE operation MUST use the iar_offset and byte range as
        dictated by the presence or absence of NFL4_UFLG_DENSE.
      </t>

      <t>
        E.g., if NFL4_UFLG_DENSE is present, and a READ or WRITE to the DS
        for iar_offset 0 really means iar_offset 10000 in the logical file, then
        an IO_ADVISE for iar_offset 0 means iar_offset 10000.
      </t>

      <t>
        E.g., if NFL4_UFLG_DENSE is absent, then a READ or WRITE to the DS
        for iar_offset 0 really means iar_offset 0 in the logical file, then an
        IO_ADVISE for iar_offset 0 means iar_offset 0 in the logical file.
      </t>

      <t>
        E.g., if NFL4_UFLG_DENSE is present, the stripe unit is 1000 bytes and
        the stripe count is 10, and the dense DS file is serving iar_offset 0.
        A  READ or WRITE to the DS for iar_offsets 0, 1000, 2000, and 3000,
        really mean iar_offsets 10000, 20000, 30000, and 40000 (implying a stripe
        count of 10 and a stripe unit of 1000), then an IO_ADVISE sent to the
        same DS with an iar_offset of 500, and a iar_count of 3000 means that the
        IO_ADVISE applies to these byte ranges of the dense DS file:
      </t>

      <figure>
        <artwork>
  - 500 to 999
  - 1000 to 1999
  - 2000 to 2999
  - 3000 to 3499
        </artwork>
      </figure>

      <t>
        I.e., the contiguous range 500 to 3499 as specified in IO_ADVISE.
      </t>

      <t>
        It also applies to these byte ranges of the logical file:
      </t>

      <figure>
        <artwork>
  - 10500 to 10999 (500 bytes)
  - 20000 to 20999 (1000 bytes)
  - 30000 to 30999 (1000 bytes)
  - 40000 to 40499 (500 bytes)
  (total            3000 bytes)
        </artwork>
      </figure>

      <t>
        E.g., if NFL4_UFLG_DENSE is absent, the stripe unit is 250 bytes, the
        stripe count is 4, and the sparse DS file is serving iar_offset 0.
        Then a READ or WRITE to the DS for iar_offsets 0, 1000, 2000, and
        3000, really mean iar_offsets 0, 1000, 2000, and 3000 in the logical
        file, keeping in mind that on the DS file,. byte ranges 250 to 999,
        1250 to 1999, 2250 to 2999, and 3250 to 3999 are not accessible. Then
        an IO_ADVISE sent to the same DS with an iar_offset of 500, and a iar_count
        of 3000 means that the IO_ADVISE applies to these byte ranges of the
        logical file and the sparse DS file:
      </t>

      <figure>
        <artwork>
  - 500 to 999 (500 bytes)   - no effect
  - 1000 to 1249 (250 bytes) - effective
  - 1250 to 1999 (750 bytes) - no effect
  - 2000 to 2249 (250 bytes) - effective
  - 2250 to 2999 (750 bytes) - no effect
  - 3000 to 3249 (250 bytes) - effective
  - 3250 to 3499 (250 bytes) - no effect
  (subtotal      2250 bytes) - no effect
  (subtotal       750 bytes) - effective
  (grand total   3000 bytes) - no effect + effective
        </artwork>
      </figure>

      <t>
        If neither of the flags NFL42_UFLG_IO_ADVISE_THRU_MDS and
        NFL4_UFLG_DENSE are set in the layout, then any IO_ADVISE request
        sent to the data server with a byte range that overlaps stripe unit
        that the data server does not serve MUST NOT result in the status
        NFS4ERR_PNFS_IO_HOLE. Instead, the response SHOULD be successful and
        if the server applies IO_ADVISE hints on any stripe units that
        overlap with the specified range, those hints SHOULD be indicated in
        the response.
      </t>
    </section>
  </section>
</section>
