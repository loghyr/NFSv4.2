<!-- Copyright (C) The IETF Trust (2011-2012) -->
<!-- Copyright (C) The Internet Society (2011-2012) -->

<section anchor="sec:sparse" title="Sparse Files">
  <section anchor="ss:sparse:intro" title="Introduction">
    <t>
      A sparse file is a common way of representing a large file without
      having to utilize all of the disk space for it.  Consequently, a
      sparse file uses less physical space than its size indicates.  This
      means the file contains 'holes', byte ranges within the file that
      contain no data.  Most modern file systems support sparse files,
      including most UNIX file systems and NTFS, but notably not Apple's
      HFS+.  Common examples of sparse files include Virtual Machine (VM)
      OS/disk images, database files, log files, and even checkpoint
      recovery files most commonly used by the HPC community.
    </t>

    <t>
      If an application reads a hole in a sparse file, the file system must
      return all zeros to the application.   For local data access there
      is little penalty, but with NFS these zeroes must be transferred back
      to the client.  If an application uses the NFS client to read data
      into memory, this wastes time and bandwidth as the application waits
      for the zeroes to be transferred.
    </t>

    <t>
      A sparse file is typically created by initializing the file to
      be all zeros - nothing is written to the data in the file, instead
      the hole is recorded in the metadata for the file. So a 8G disk
      image might be represented initially by a couple hundred bits
      in the inode and nothing on the disk. If the VM then writes
      100M to a file in the middle of the image, there would now be
      two holes represented in the metadata and 100M in the data.
    </t>

    <t>
      Two new operations INITIALIZE (<xref target="op:initialize" />)
      and READ_PLUS (<xref target="op:read_plus" />) are introduced.
      INITIALIZE allows for the creation of a sparse file and for hole
      punching.  An application might want to zero out a range of the file.
      READ_PLUS supports all the features of READ but includes an extension to support sparse
      pattern files (<xref target="ss:adb:dc" />).  READ_PLUS is guaranteed to perform
      no worse than READ, and can dramatically improve performance with
      sparse files.  READ_PLUS does not depend on pNFS protocol features,
      but can be used by pNFS to support sparse files.
    </t>
  </section>

  <section anchor="ss:sparse:terms" title="Terminology">
    <t>
      <list style="hanging">
        <t hangText="Regular file:">
          An object of file type NF4REG or NF4NAMEDATTR.
        </t>

        <t hangText="Sparse file:">
          A Regular file that contains one or more Holes.
        </t>

        <t hangText="Hole:">
          A byte range within a Sparse file that contains regions of
          all zeroes.  For block-based file systems, this could also be an
          unallocated region of the file.
        </t>

        <t hangText='Hole Threshold:'>
          The minimum length of a Hole as determined by the server.
          If a server chooses to define a Hole Threshold, then it
          would not return hole information about holes with a length
          shorter than the Hole Threshold.
        </t>
      </list>
    </t>
  </section>
</section>
