<!-- Copyright (C) The IETF Trust (2011) -->
<!-- Copyright (C) The Internet Society (2011) -->
<section anchor="sec:pLeh" title="pNFS LAYOUTRETURN Error Handling">

  <section anchor="sec:pLeh:intro" title="Introduction">

    <t>
      In the pNFS description provided in <xref target="RFC5661" />,
      the client is not enabled to relay an error code from the
      DS to the MDS. In the specification of the Objects-Based
      Layout protocol <xref target='RFC5664' />, use is made of the
      opaque lrf_body field of the LAYOUTRETURN argument to
      do such a relaying of error codes. In this section,
      we define a new data structure to enable the passing
      of error codes back to the MDS and provide some guidelines
      on what both the client and MDS should expect in such
      circumstances.
    </t>

    <t>
      There are two broad classes of errors, transient and persistent.
      The client SHOULD strive to only use this new mechanism to
      report persistent errors. It MUST be able to deal with transient
      issues by itself. Also, while the client might consider an issue
      to be persistent, it MUST be prepared for the MDS to consider
      such issues to be persistent. A prime example of this is if
      the MDS fences off a client from either a stateid or a filehandle.
      The client will get an error from the DS and might relay either
      NFS4ERR_ACCESS or NFS4ERR_STALE_STATEID back to the MDS, with the
      belief that this is a hard error. The MDS on the other hand, is
      waiting for the client to report such an error. For it, the mission
      is accomplished in that the client has returned a layout that
      the MDS had most likley recalled.
    </t>
  </section>

  <section anchor="sec:pLeh:LAYOUTRETURN" title="Changes to Operation 51: LAYOUTRETURN">
    <t>
      The existing LAYOUTRETURN operation is extended by introducing a
      new data structure to report errors, layoutreturn_device_error4.
      Also, layoutreturn_device_error4 is introduced to enable an
      array of errors to be reported.
    </t>

    <section anchor="sec:pLeh:LAYOUTRETURN:args" title="ARGUMENT">

      <t>
        The ARGUMENT specification of the LAYOUTRETURN operation in section
        18.44.1 of <xref target="RFC5661" /> is augmented by the following
        XDR code <xref target="RFC4506" />:
      </t>

      <?rfc include='autogen/type_layoutreturn_errs.xml'?>

    </section>

    <section anchor="sec:pLeh:LAYOUTRETURN:res" title="RESULT">

      <t>
        The RESULT of the LAYOUTRETURN operation is unchanged; see section
        18.44.2 of <xref target="RFC5661" />.
      </t>
    </section>

    <section anchor="sec:pLeh:LAYOUTRETURN:desc" title="DESCRIPTION">

      <t>
        The following text is added to the end of the LAYOUTRETURN operation
        DESCRIPTION in section 18.44.3 of <xref target="RFC5661" />.
      </t>

      <t>
        When a client used LAYOUTRETURN with a type of LAYOUTRETURN4_FILE,
        then if the lrf_body field is NULL, it indicates to the MDS
        that the client experienced no errors. If lrf_body is non-NULL,
        then the field references error information which is layout type
        specific. I.e., the Objects-Based Layout protocol
        can continue to utilize lrf_body as specified in <xref target='RFC5664' />.
        For both Files-Based Layouts, the field references a
        layoutreturn_device_error4, which contains an array of layoutreturn_device_error4.
      </t>

      <t>
        Each individual layoutreturn_device_error4 descibes a single
        error associated with a DS, which is identfied via lrde_deviceid.
        The operation which returned the error is identified
        via lrde_opnum. Finally the NFS error value (nfsstat4) encountered
        is provided via lrde_status and may consist of the following
        error codes:
      </t>

      <t>
        <list style='hanging'>
          <t hangText='NFS4_OKAY:'>
            No issues were found for this device.
          </t>

          <t hangText='NFS4ERR_NXIO:'>
            The client was unable to establish any communication with the DS.
          </t>

          <t hangText='NFS4ERR_*:'>
            The client was able to establish communication with the DS and
            is returning one of the allowed error codes for the operation
            denoted by lrde_opnum.
          </t>
        </list>
      </t>
    </section>

    <section anchor="sec:pLeh:LAYOUTRETURN:impl" title="IMPLEMENTATION">
      <t>
        The following text is added to the end of the LAYOUTRETURN operation
        IMPLEMENTATION in section 18.4.4 of <xref target="RFC5661" />.
      </t>

      <t>
        A client that expects to use pNFS for a mounted filesystem SHOULD
        check for pNFS support at mount time. This check SHOULD be performed
        by sending a GETDEVICELIST operation, followed by layout-type-specific
        checks for accessibility of each storage device returned by
        GETDEVICELIST.  If the NFS server does not support pNFS, the
        GETDEVICELIST operation will be rejected with an NFS4ERR_NOTSUPP
        error; in this situation it is up to the client to determine whether
        it is acceptable to proceed with NFS-only access.
      </t>

      <t>
        Clients are expected to tolerate transient storage device errors, and
        hence clients SHOULD NOT use the LAYOUTRETURN error handling for
        device access problems that may be transient. The methods by which a
        client decides whether an access problem is transient vs. persistent
        are implementation-specific, but may include retrying I/Os to a data
        server under appropriate conditions.
      </t>

      <t>
        When an I/O fails to a storage device, the
        client SHOULD retry the failed I/O via the MDS. In this situation,
        before retrying the I/O, the client SHOULD return the layout, or
        the affected portion thereof, and SHOULD indicate which storage
        device or devices was problematic. If the client does not do
        this, the MDS may issue a layout recall callback in order to perform
        the retried I/O.
      </t>

      <t>
        The client needs to be cognizant that since this error handling
        is optional in the MDS, the MDS may silently ignore this functionality.
        Also, as the MDS may consider some issues the client reports to
        be expected (see <xref target='sec:pLeh:intro' />), the client might
        find it difficult to detect a MDS which has not implemented error
        handling via LAYOUTRETURN.
      </t>

      <t>
        If an MDS is aware that a storage device is proving problematic to a client,
        the MDS SHOULD NOT include that storage device in any pNFS layouts
        sent to that client. If the MDS is aware that a storage device is
        affecting many clients, then the MDS SHOULD NOT include that
        storage device in any pNFS layouts sent out.  Clients must still be
        aware that the MDS might not have any choice in using the storage
        device, i.e., there might only be one possible layout for the system.
      </t>

      <t>
        Another interesting complication is that for existing files, the
        MDS might have no choice in which storage devices to hand out to
        clients. The MDS might try to restripe a file across a different
        storage device, but clients need to be aware that not all
        implementations have restriping support.
      </t>

      <t>
        An MDS SHOULD react to a client return of
        layouts with errors by not using the problematic storage devices in
        layouts for that client, but the MDS is not required to indefinitely
        retain per-client storage device error information. An MDS
        is also not required to automatically reinstate use of a previously
        problematic storage device; administrative intervention may be
        required instead.
      </t>

      <t>
        A client MAY perform I/O via the MDS even when the client holds a
        layout that covers the I/O; servers MUST support this client
        behavior, and MAY recall layouts as needed to complete I/Os.
      </t>
    </section>
  </section>
</section>
