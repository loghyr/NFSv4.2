<!-- Copyright (C) The IETF Trust (2011-2014) -->
<!-- Copyright (C) The Internet Society (2011-2014) -->

<section anchor='op:seek' title='Operation 69: SEEK - Find the Next Data or Hole'>
  <section toc='exclude' title="ARGUMENT">
    <t>
      &lt;CODE BEGINS&gt;
    </t>

    <?rfc include='autogen/data_content4.xml'?>
    <?rfc include='autogen/seek_args.xml'?>

    <t>
      &lt;CODE ENDS&gt;
    </t>
  </section>

  <section toc='exclude' title="RESULT">
    <t>
      &lt;CODE BEGINS&gt;
    </t>

    <?rfc include='autogen/seek_res_pre.xml'?>
    <?rfc include='autogen/seek_res.xml'?>

    <t>
      &lt;CODE ENDS&gt;
    </t>
  </section>

  <section toc='exclude' title="DESCRIPTION">
    <t>
      SEEK is an operation that allows a client to determine the location
      of the next data_content4 in a file. It allows an implementation
      of the emerging extension to lseek(2) to allow clients to determine
      the next hole whilst in data or the next data whilst in a hole.
    </t>

    <t>
      From the given sa_offset, find the next data_content4 of type
      sa_what in the file. If the server can not find a corresponding
      sa_what, then the status will still be NFS4_OK, but sr_eof
      would be TRUE.  If the server can find the sa_what, then the
      sr_offset is the start of that content.  If the sa_offset is
      beyond the end of the file, then SEEK MUST return NFS4ERR_NXIO.
    </t>

    <t>
      All files MUST have a virtual hole at the end of the file. I.e.,
      if a filesystem does not support sparse files, then a compound
      with {SEEK 0 NFS4_CONTENT_HOLE;} would return a result of
      {SEEK 1 X;} where 'X' was the size of the file.
    </t>

    <t>
      SEEK must follow the same rules for stateids as READ_PLUS
      (<xref target='op:read_plus:desc' />).
    </t>
  </section>
</section>
