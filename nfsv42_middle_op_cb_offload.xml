<!-- Copyright (C) The IETF Trust (2011-2014) -->
<!-- Copyright (C) The Internet Society (2011-2014) -->

<section anchor="op:cb_offload" title="Operation 15: CB_OFFLOAD - Report results of an asynchronous operation">
  <section toc='exclude' title="ARGUMENT">
    <?rfc include='autogen/write_response4.xml'?>
    <?rfc include='autogen/cb_offload_args.xml'?>
  </section>

  <section toc='exclude' title="RESULT">
    <?rfc include='autogen/cb_offload_res.xml'?>
  </section>

  <section toc='exclude' title="DESCRIPTION">
    <t>
      CB_OFFLOAD is used to report to the client the results of
      an asynchronous operation, e.g., Server-side Copy or a hole punch. 
      The coa_fh and coa_stateid identify the transaction and the coa_status
      indicates success or failure. The coa_resok4.wr_callback_id MUST NOT
      be set. If the transaction failed, then the coa_bytes_copied
      contains the number of bytes copied before the failure occurred.
      The coa_bytes_copied value indicates the number of bytes copied
      but not which specific bytes have been copied.
    </t>

    <t>
      If the client supports any of the following operations:

      <list style="hanging">
        <t hangText='COPY:'>
          for both intra- and inter-server asynchronous copies
        </t>

        <t hangText='WRITE_HOLE:'>
          for a hole punch
        </t>

        <t hangText='WRITE_SAME:'>
          for ADB initialization
        </t>
      </list>

      then the client is REQUIRED to support the CB_OFFLOAD operation.
    </t>

    <t>
      There is a potential race between the reply to the original transaction on
      the forechannel and the CB_OFFLOAD callback on the backchannel.
      Sections 2.10.6.3 and 20.9.3 of <xref target="RFC5661" />
      describe how to handle this type of issue.
    </t>

    <t>
      Upon success, the coa_resok4.wr_count presents for each
      operation:

      <list style="hanging">
        <t hangText='COPY:'>
          the total number of bytes copied
        </t>

        <t hangText='WRITE_HOLE:'>
          the same information that a synchronous WRITE_HOLE
          would provide
        </t>

        <t hangText='WRITE_SAME:'>
          the same information that a synchronous WRITE_SAME
          would provide
        </t>
      </list>
    </t>
  </section>
</section>
