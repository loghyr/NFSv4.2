<!-- Copyright (C) The IETF Trust (2011-2014) -->
<!-- Copyright (C) The Internet Society (2011-2014) -->

<section anchor='sec:adb' title='Application Data Block Support'>
  <t>
    At the OS level, files are contained on disk
    blocks.  Applications are also free to impose structure on the
    data contained in a file and we can define an Application Data
    Block (ADB) to be such a structure. From the application's
    viewpoint, it only wants to handle ADBs and not raw bytes (see
    <xref target='Strohm11' />). An ADB is typically
    comprised of two sections: header and data. The header
    describes the characteristics of the block and can provide
    a means to detect corruption in the data payload.
    The data section is typically initialized to all zeros.
  </t>

  <t>
    The format of the header is application specific, but there
    are two main components typically encountered:
  </t>

  <t>
    <list style='numbers'>
      <t>
        An Application Data Block Number (ADBN) which allows
        the application to determine which data block is being
        referenced.  This is useful when the client is not
        storing the blocks in contiguous memory, i.e., a logical
        block number.
      </t>

      <t>
        Fields to describe the state of the ADB and a means to
        detect block corruption.  For both pieces of data, a useful
        property is that allowed values be unique in that if passed
        across the network, corruption due to translation between
        big and little endian architectures are detectable.  For
        example, 0xF0DEDEF0 has the same bit pattern in both
        architectures.
      </t>
    </list>
  </t>

  <t>

    Applications already impose structures on files
    <xref target='Strohm11' /> and detect corruption in data blocks
    <xref target='Ashdown08' />.  What they are not able to do is
    efficiently transfer and store ADBs. To initialize a file with
    ADBs, the client must send each full ADB to the server and that
    must be stored on the server.

  </t>

  <t>
    In this section, we define a framework for transferring the ADB
    from client to server and present one approach to detecting
    corruption in a given ADB implementation.
  </t>

  <section anchor='ss:adb:framework' title='Generic Framework'>
    <t>
      We want the representation of the ADB to be flexible enough
      to support many different applications. The most basic approach
      is no imposition of a block at all, which means we are working
      with the raw bytes. Such an approach would be useful for
      storing holes, punching holes, etc.  In more complex deployments,
      a server might be supporting multiple applications, each with
      their own definition of the ADB. One might store the ADBN at
      the start of the block and then have a guard pattern to detect
      corruption <xref target='McDougall07' />. The next might store
      the ADBN at an offset of 100 bytes within the block and have
      no guard pattern at all, i.e., existing applications might
      already have well defined formats for their data blocks.
    </t>

    <t>
      The guard pattern can be used to represent the state of
      the block, to protect against corruption, or both. Again,
      it needs to be able to be placed anywhere within the
      ADB.
    </t>

    <t>
      We need to be able to represent the starting
      offset of the block and the size of the block. Note that
      nothing prevents the application from defining different
      sized blocks in a file.
    </t>

    <section anchor='ss:adb:dh' title='Data Block Representation'>
      <?rfc include='autogen/app_data_block4.xml'?>
      <t>
        The app_data_block4 structure captures the abstraction presented
        for the ADB. The additional fields present are to allow
        the transmission of adb_block_count ADBs at one time.  We
        also use adb_block_num to convey the ADBN of the first block
        in the sequence.  Each ADB will contain the same adb_pattern
        string.
      </t>

      <t>
        As both adb_block_num and adb_pattern are optional, if
        either adb_reloff_pattern or adb_reloff_blocknum is set
        to NFS4_UINT64_MAX, then the corresponding field is not
        set in any of the ADB.
      </t>
    </section>
  </section>

  <section anchor='ss:adb:corrupt' title='An Example of Detecting Corruption'>
    <t>
      In this section, we define an ADB format in which
      corruption can be detected. Note that this is just
      one possible format and means to detect corruption.
    </t>

    <t>
      Consider a very basic implementation of an operating
      system's disk blocks. A block is either data or it
      is an indirect block which allows for files to be
      larger than one block. It is desired to be able
      to initialize a block. Lastly, to quickly unlink
      a file, a block can be marked invalid. The contents
      remain intact - which would enable this OS application
      to undelete a file.
    </t>

    <t>
      The application defines 4k sized data blocks, with an
      8 byte block counter occurring at offset 0 in the block,
      and with the guard pattern occurring at offset 8 inside
      the block. Furthermore, the guard pattern can take one
      of four states:
    </t>

    <t>
      <list style='hanging'>
        <t hangText='0xfeedface - '>
          This is the FREE state and indicates that the
          ADB format has been applied.
        </t>

        <t hangText='0xcafedead - '>
          This is the DATA state and indicates that real
          data has been written to this block.
        </t>

        <t hangText='0xe4e5c001 - '>
          This is the INDIRECT state and indicates that the block
          contains block counter numbers that are chained off of
          this block.
        </t>

        <t hangText='0xba1ed4a3 - '>
          This is the INVALID state and indicates that the
          block contains data whose contents are garbage.
        </t>
      </list>
    </t>

    <t>
      Finally, it also defines an 8 byte checksum
      <xref target='Baira08' /> starting at byte 16 which applies
      to the remaining contents of the block. If the state is FREE,
      then that checksum is trivially zero. As such, the application
      has no need to transfer the checksum implicitly inside the
      ADB - it need not make the transfer layer aware of the fact
      that there is a checksum (see <xref target='Ashdown08' /> for
      an example of checksums used to detect corruption in application
      data blocks).
    </t>

    <t>
      Corruption in each ADB can thus be detected:
    </t>

    <t>
      <list style='symbols'>
        <t>
          If the guard pattern is anything other than one
          of the allowed values, including all zeros.
        </t>

        <t>
          If the guard pattern is FREE and any other
          byte in the remainder of the ADB is anything other
          than zero.
        </t>

        <t>
          If the guard pattern is anything other than FREE,
          then if the stored checksum does not match the
          computed checksum.
        </t>

        <t>
          If the guard pattern is INDIRECT and one of the
          stored indirect block numbers has a value greater
          than the number of ADBs in the file.
        </t>

        <t>
          If the guard pattern is INDIRECT and one of the
          stored indirect block numbers is a duplicate of
          another stored indirect block number.
        </t>
      </list>
    </t>

    <t>
      As can be seen, the application can detect errors based
      on the combination of the guard pattern state and the
      checksum. But also, the application can detect corruption
      based on the state and the contents of the ADB.
      This last point is important in validating the minimum
      amount of data we incorporated into our generic
      framework. I.e., the guard pattern is sufficient
      in allowing applications to design their own
      corruption detection.
    </t>

    <t>
      Finally, it is important to note that none of these
      corruption checks occur in the transport layer. The
      server and client components are totally unaware of
      the file format and might report everything as being
      transferred correctly even in the case the application
      detects corruption.
    </t>
  </section>

  <section anchor='ss:adh:ex_rp' title='Example of READ_PLUS'>
    <t>
      The hypothetical application presented in
      <xref target='ss:adb:corrupt' /> can be used to
      illustrate how READ_PLUS would return an array
      of results. A file is created and initialized
      with 100 4k ADBs in the FREE state with the WRITE_SAME
      operation (see <xref target='op:write_same' />):
    </t>

    <figure>
      <artwork>
   WRITE_SAME {0, 4k, 100, 0, 0, 8, 0xfeedface}
      </artwork>
    </figure>

    <t>
      Further, assume the application writes a single
      ADB at 16k, changing the guard pattern to 0xcafedead,
      we would then have in memory:
    </t>

    <figure>
      <artwork>
    0k ->   (4k - 1) : 00 00 00 00 fe ed fa ce 00 00 ... 00 00
    4k ->   (8k - 1) : 00 00 00 01 fe ed fa ce 00 00 ... 00 00
    8k ->  (12k - 1) : 00 00 00 02 fe ed fa ce 00 00 ... 00 00
   12k ->  (16k - 1) : 00 00 00 03 fe ed fa ce 00 00 ... 00 00
   16k ->  (20k - 1) : 00 00 00 04 ca fe de ad 00 00 ... 00 00
   20k ->  (24k - 1) : 00 00 00 05 fe ed fa ce 00 00 ... 00 00
   24k ->  (28k - 1) : 00 00 00 06 fe ed fa ce 00 00 ... 00 00
      ...
  396k -> (400k - 1) : 00 00 00 63 fe ed fa ce 00 00 ... 00 00
      </artwork>
    </figure>

    <t>
     And when the client did a READ_PLUS of 64k at the start of the file,
     it could get back a result of data:
    </t>

    <figure>
      <artwork>
    0k ->   (4k - 1) : 00 00 00 00 fe ed fa ce 00 00 ... 00 00
    4k ->   (8k - 1) : 00 00 00 01 fe ed fa ce 00 00 ... 00 00
    8k ->  (12k - 1) : 00 00 00 02 fe ed fa ce 00 00 ... 00 00
   12k ->  (16k - 1) : 00 00 00 03 fe ed fa ce 00 00 ... 00 00
   16k ->  (20k - 1) : 00 00 00 04 ca fe de ad 00 00 ... 00 00
   20k ->  (24k - 1) : 00 00 00 05 fe ed fa ce 00 00 ... 00 00
   24k ->  (24k - 1) : 00 00 00 06 fe ed fa ce 00 00 ... 00 00
      ...
   62k ->  (64k - 1) : 00 00 00 15 fe ed fa ce 00 00 ... 00 00
      </artwork>
    </figure>
  </section>

  <section anchor='ss:adb:zero' title='An Example of Zeroing Space'>
    <t>
      A simpler use case for WRITE_SAME are applications that want to
      efficiently zero out a file, but do not want to modify space
      reservations.  This can easily be archived by a call to WRITE_SAME
      without a ADB block numbers and pattern, e.g.:
    </t>

    <figure>
      <artwork>
   WRITE_SAME {0, 1k, 10000, 0, 0, 0, 0}
      </artwork>
    </figure>
  </section>
</section>
