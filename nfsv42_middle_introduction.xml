<!-- Copyright (C) The IETF Trust (2011-2014) -->
<!-- Copyright (C) The Internet Society (2011-2014) -->

<section anchor="sec:intro" title="Introduction">
  <section title="The NFS Version 4 Minor Version 2 Protocol">
    <t>
      The NFS version 4 minor version 2 (NFSv4.2) protocol is the
      third minor version of the NFS version 4 (NFSv4) protocol.
      The first minor version, NFSv4.0, is described in <xref
      target="I-D.ietf-nfsv4-rfc3530bis" /> and the second minor
      version, NFSv4.1, is described in <xref target="RFC5661" />.
    </t>

    <t>
      As a minor version, NFSv4.2 is consistent with the overall
      goals for NFSv4, but extends the protocol so as to better
      meet those goals, based on experiences with NFSv4.1.  In
      addition, NFSv4.2 has adopted some additional goals, which
      motivate some of the major extensions in NFSv4.2.
    </t>
  </section>

  <section title="Scope of This Document">
    <t>
      This document describes the NFSv4.2 protocol.  With respect to
      NFSv4.0 and NFSv4.1, this document does not:
    </t>

    <t>
      <list style="symbols">
        <t>
          describe the NFSv4.0 or NFSv4.1 protocols, except where needed to contrast with NFSv4.2
        </t>

        <t>
          modify the specification of the NFSv4.0 or NFSv4.1 protocols
        </t>

        <t>
          clarify the NFSv4.0 or NFSv4.1 protocols. I.e., any clarifications made
          here apply to NFSv4.2 and neither of the prior protocols
        </t>
      </list>
    </t>

    <t>
      The full External Data Representation (XDR) <xref target='RFC4506' />
      for NFSv4.2 is presented in <xref target='NFSv42xdr' />.
    </t>
  </section>

  <section title="NFSv4.2 Goals">
    <t>
      A major goal of the design of NFSv4.2 is to take common local file system
      features and offer them remotely.  These features might
      <list style='symbols'>
        <t>
          already be available on the servers, e.g., sparse files
        </t>

        <t>
          be under development as a new standard, e.g., SEEK pulls in
          both SEEK_HOLE and SEEK_DATA
        </t>

        <t>
          be used by clients with the servers via some proprietary means, e.g.,
          Labeled NFS
        </t>
      </list>

      NFSv4.2 provides means for clients to leverage these  features
      on the server in cases in which that had previously not been
      possible within the confines of the NFS protocol.
    </t>
  </section>

  <section title="Overview of NFSv4.2 Features">
    <section title="Server Side Copy">
      <t>
        A traditional file copy of a remotely accessed, whether from one server
        to another or between location in the same server, results in the
        data being put on the network twice - source to client and then
        client to destination.  New operations are introduced to allow
        unnecessary traffic to be eliminated:

        <list>
          <t>
            The intra-server copy feature allows the client to request the
            server to perform the copy internally, avoiding unnecessary network
             traffic.
          </t>

          <t>
            The inter-server copy feature allows the client to authorize the
            source and destination servers to interact directly.
          </t>
        </list>
      </t>

      <t>
        As such copies can be lengthy, asynchronous support is also provided.
      </t>
    </section>

    <section title="Application I/O Advise">
      <t>
        Applications and clients want to advise the server as to
        expected I/O behavior.  Using IO_ADVISE (see <xref target='op:io_advise' />)
        to communicate future I/O behavior such as whether a file will be
        accessed sequentially or randomly, and whether a file will or will
        not be accessed in the near future, allows servers to  optimize future I/O
        requests for a file by, for example, prefetching or evicting data.
	This operation can be used to support the posix_fadvise
	function.  In addition, it may be helpful to applications
	such as databases and video editors.
      </t>
    </section>

    <section title="Sparse Files">
      <t>
        Sparse files are ones which have unallocated or uninitialized data
        blocks as holes in the file. Such holes are typically transferred
        as 0s during I/O. READ_PLUS (see <xref target='op:read_plus' />)
        allows a server to send back to the client metadata describing
        the hole and DEALLOCATE (see <xref target='op:deallocate' />)
        allows the client to punch holes into a file. In addition,
        SEEK (see <xref target='op:seek' />) is provided to scan
        for the next hole or data from a given location.
      </t>
    </section>

    <section title="Space Reservation">
      <t>
        When a file is sparse, one concern applications have is
        ensuring that there will always be enough data blocks
        available for the file during future writes. ALLOCATE (see
        <xref target='op:allocate' />) allows a client to request
        a guarantee that space will be available. Also DEALLOCATE
        (see <xref target='op:deallocate' />) allows the client to
        punch a hole into a file, thus releasing a space reservation.
      </t>
    </section>

    <section title="Application Data Block (ADB) Support">
      <t>
        Some applications treat a file as if it were a disk and as such
        want to initialize (or format) the file image. We
        introduce WRITE_SAME (see <xref target='op:write_same' />)
        to send this metadata to the server to allow it to write
        the block contents.
      </t>
    </section>

    <section title="Labeled NFS">
      <t>
        While both clients and servers can employ Mandatory Access Control (MAC)
        security models to enforce data access, there has been no protocol
        support for interoperability. A new file object attribute,
        sec_label (see <xref target='ss:fattr:sec' />) allows for the
        server to store MAC labels on files, which the client
        retrieves and uses to enforce data access
        (see <xref target='ss:modes:guest' />).
        The format of the sec_label accommodates any MAC security system.
      </t>
    </section>
  </section>

  <section title="Enhancements to Minor Versioning Model">
    <t>
      In NFSv4.1, the only way to introduce new variants of an
      operation was to introduce a new operation. I.e., READ becomes
      either READ2 or READ_PLUS.  With the use of discriminated
      unions as parameters to such functions in NFSv4.2, it is
      possible to add a new arm in a subsequent minor version. And
      it is also possible to move such an operation from
      OPTIONAL/RECOMMENDED to REQUIRED. Forcing an implementation
      to adopt each arm of a discriminated union at such a time
      does not meet the spirit of the minor versioning rules.  As
      such, new arms of a discriminated union MUST follow the same
      guidelines for minor versioning as operations in NFSv4.1 -
      i.e., they may not be made REQUIRED. To support this, a new
      error code, NFS4ERR_UNION_NOTSUPP, allows the server to
      communicate to the client that the operation is supported,
      but the specific arm of the discriminated union is not.
    </t>
  </section>
</section>
