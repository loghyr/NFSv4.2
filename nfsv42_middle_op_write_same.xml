<!-- Copyright (C) The IETF Trust (2011-2014) -->
<!-- Copyright (C) The Internet Society (2011-2014) -->

<section anchor='op:write_same' title='Operation 70: WRITE_SAME - WRITE an ADB Multiple Times to a File'>
  <section toc='exclude' title="ARGUMENT">
    <t>
      &lt;CODE BEGINS&gt;
    </t>

    <?rfc include='autogen/stable_how4.xml'?>
    <?rfc include='autogen/app_data_block4.xml'?>
    <?rfc include='autogen/write_same_args.xml'?>

    <t>
      &lt;CODE ENDS&gt;
    </t>
  </section>

  <section toc='exclude' title="RESULT">
    <t>
      &lt;CODE BEGINS&gt;
    </t>

    <?rfc include='autogen/write_response4.xml'?>
    <?rfc include='autogen/write_same_res.xml'?>

    <t>
      &lt;CODE ENDS&gt;
    </t>
  </section>

  <section toc='exclude' anchor='op:write_same:desc'  title="DESCRIPTION">
    <t>
      The WRITE_SAME operation writes an application data block to
      the regular file identified by the current filehandle (see
      WRITE SAME (10) in <xref target='T10-SBC2' />).  The
      target file is specified by the current filehandle.  The data
      to be written is specified by an app_data_block4 structure
      (<xref target="ss:adb:dh"/>).  The client specifies with the
      wsa_stable parameter the method of how the data is to be
      processed by the server.  It is treated like the stable
      parameter in the NFSv4.1 WRITE operation (see Section 18.2
      of <xref target="RFC5661" />).
    </t>

    <t>
      A successful WRITE_SAME will construct a reply for wr_count,
      wr_committed, and wr_writeverf as per the NFSv4.1 WRITE
      operation results.  If wr_callback_id is set, it indicates
      an asynchronous reply (see <xref target='op:write_same:async' />).
    </t>

    <t>
      WRITE_SAME has to support all of the errors which are returned
      by WRITE plus NFS4ERR_NOTSUPP, i.e., it is an OPTIONAL
      operation.  If the client supports WRITE_SAME, it MUST support
      CB_OFFLOAD.
    </t>

    <t>
      If the server supports ADBs, then it MUST support the
      WRITE_SAME operation.  The server has no concept of the
      structure imposed by the application. It is only when the
      application writes to a section of the file does order get
      imposed.  In order to detect corruption even before the
      application utilizes the file, the application will want
      to initialize a range of ADBs using WRITE_SAME.
    </t>

    <t>
      When the client invokes the WRITE_SAME operation, it wants
      to record the block structure described by the app_data_block4
      on to the file.
    </t>

    <t>
      When the server receives the WRITE_SAME operation, it MUST
      populate adb_block_count ADBs in the file starting at adb_offset.
      The block size will be given by adb_block_size. The ADBN (if
      provided) will start at adb_reloff_blocknum and each block
      will be monotonically numbered starting from adb_block_num
      in the first block. The pattern (if provided) will be at
      adb_reloff_pattern of each block and will be provided in
      adb_pattern.
    </t>

    <t>
      The server SHOULD return an asynchronous result if it can
      determine the operation will be long running (see
      <xref target='op:write_same:async' />).  Once either the
      WRITE_SAME finishes synchronously or the server uses CB_OFFLOAD
      to inform the client of the asynchronous completion of the
      WRITE_SAME, the server MUST return the ADBs to clients as
      data.
    </t>

    <section anchor='op:write_same:async' title='Asynchronous Transactions'>
      <t>
        ADB initialization may lead to server determining to service
        the operation asynchronously. If it decides to do so, it
        sets the stateid in wr_callback_id to be that of the
        wsa_stateid. If it does not set the wr_callback_id, then the
        result is synchronous.
      </t>

      <t>
        When the client determines that the reply will be given
        asynchronously, it should not assume anything about the
        contents of what it wrote until it is informed by the server
        that the operation is complete. It can use OFFLOAD_STATUS
        (<xref target="op:offload_status" />) to monitor the operation
        and OFFLOAD_CANCEL (<xref target="op:offload_close" />) to
        cancel the operation. An example of a asynchronous WRITE_SAME
        is shown in <xref target='fig:async-write_same' />. Note
        that as with the COPY operation, WRITE_SAME must provide a
        stateid for tracking the asynchronous operation.
      </t>

      <figure title="An asynchronous WRITE_SAME." anchor="fig:async-write_same">
        <artwork><![CDATA[
  Client                                  Server
     +                                      +
     |                                      |
     |--- OPEN ---------------------------->| Client opens
     |<------------------------------------/| the file
     |                                      |
     |--- WRITE_SAME ----------------------->| Client initializes
     |<------------------------------------/| an ADB
     |                                      |
     |                                      |
     |--- OFFLOAD_STATUS ------------------>| Client may poll
     |<------------------------------------/| for status
     |                                      |
     |                  .                   | Multiple OFFLOAD_STATUS
     |                  .                   | operations may be sent.
     |                  .                   |
     |                                      |
     |<-- CB_OFFLOAD -----------------------| Server reports results
     |\------------------------------------>|
     |                                      |
     |--- CLOSE --------------------------->| Client closes
     |<------------------------------------/| the file
     |                                      |
     |                                      |
        ]]></artwork>
      </figure>

      <t>
        When CB_OFFLOAD informs the client of the successful
        WRITE_SAME, the write_response4 embedded in the operation
        will provide the necessary information that a synchronous
        WRITE_SAME would have provided.
      </t>

      <t>
        Regardless of whether the operation is asynchronous or
        synchronous, it MUST still support the COMMIT operation
        semantics as outlined in Section 18.3 of <xref target="RFC5661" />.
        I.e., COMMIT works on one or more WRITE operations and
        the WRITE_SAME operation can appear as several WRITE
        operations to the server.  The client can use locking
        operations to control the behavior on the server with respect
        to long running asynchronous write operations.
      </t>
    </section>

    <section anchor='op:write_same:errors' title='Error Handling of a Partially Complete WRITE_SAME'>
      <t>
        WRITE_SAME will clone adb_block_count copies of the given
        ADB in consecutive order in the file starting at adb_offset.
        An error can occur after writing the Nth ADB to the file.
        WRITE_SAME MUST appear to populate the range of the file
        as if the client used WRITE to transfer the instantiated
        ADBs. I.e., the contents of the range will be easy for
        the client to determine in case of a partially complete
        WRITE_SAME.
      </t>
    </section>
  </section>
</section>
