<!-- Copyright (C) The IETF Trust (2011-2014) -->
<!-- Copyright (C) The Internet Society (2011-2014) -->

<section anchor="op:copy" title="Operation 59: COPY - Initiate a server-side copy">
  <section toc='exclude' title="ARGUMENT">
    <?rfc include='autogen/copy_args.xml'?>
  </section>

  <section toc='exclude' title="RESULT">
    <?rfc include='autogen/write_response4.xml'?>
    <?rfc include='autogen/copy_res.xml'?>
  </section>

  <section toc='exclude' title="DESCRIPTION">
    <t>
      The COPY operation is used for both intra-server and inter-server
      copies. In both cases, the COPY is always sent from the client
      to the destination server of the file copy. The COPY operation
      requests that a file be copied from the location specified by the
      SAVED_FH value to the location specified by the CURRENT_FH.
    </t>

    <t>
      The SAVED_FH must be a regular file. If SAVED_FH is not a
      regular file, the operation MUST fail and return NFS4ERR_WRONG_TYPE.
    </t>

    <t>
      In order to set SAVED_FH to the source file handle,
      the compound procedure requesting the COPY will
      include a sub-sequence of operations such as
    </t>

    <figure>
      <artwork>
   PUTFH source-fh
   SAVEFH
      </artwork>
    </figure>

    <t>
      If the request is for a server-to-server copy, the source-fh
      is a filehandle from the source server and the compound
      procedure is being executed on the destination server. In
      this case, the source-fh is a foreign filehandle on the
      server receiving the COPY request. If either PUTFH or
      SAVEFH checked the validity of the filehandle, the operation
      would likely fail and return NFS4ERR_STALE.
    </t>

    <t>
      If a server supports the
      server-to-server COPY feature, a PUTFH followed by a SAVEFH
      MUST NOT return NFS4ERR_STALE for either operation. These
      restrictions do not pose substantial difficulties for
      servers. The CURRENT_FH and SAVED_FH may be validated in the
      context of the operation referencing them and an NFS4ERR_STALE
      error returned for an invalid file handle at that point.
    </t>

    <t>
      For an intra-server copy, both the ca_src_stateid and
      ca_dst_stateid MUST refer to either open or locking
      states provided earlier by the server. If either
      stateid is invalid, then the operation MUST fail.
      If the request is for a inter-server copy, then the
      ca_src_stateid can be ignored. If ca_dst_stateid
      is invalid, then the operation MUST fail.
    </t>

    <t>
      The CURRENT_FH specifies the destination of the copy operation.
      The CURRENT_FH MUST be a regular file and not a directory. Note,
      the file MUST exist before the COPY operation begins. It is the
      responsibility of the client to create the file if necessary,
      regardless of the actual copy protocol used.
      If the file cannot be created in the destination file system (due to
      file name restrictions, such as case or length), the COPY
      operation MUST NOT be called.
    </t>

    <t>
      The ca_src_offset is the offset within the source file from
      which the data will be read, the ca_dst_offset is the offset
      within the destination file to which the data will be
      written, and the ca_count is the number of bytes that will be
      copied. An offset of 0 (zero) specifies the start of the file. A
      count of 0 (zero) requests that all bytes from ca_src_offset
      through EOF be copied to the destination. If concurrent modifications
      to the source file overlap with the source file region being copied,
      the data copied may include all, some, or none of the
      modifications. The client can use standard NFS operations (e.g., OPEN with
      OPEN4_SHARE_DENY_WRITE or mandatory byte range locks) to protect against
      concurrent modifications if the client is concerned about this. If the
      source file's end of file is being modified in parallel with a copy that
      specifies a count of 0 (zero) bytes, the amount of data copied is
      implementation dependent (clients may guard against this case by specifying
      a non-zero count value or preventing modification of the source file as
      mentioned above).
    </t>

    <t>
      If the source offset or the source offset plus count is
      greater than or equal to the size of the source file, the
      operation will fail with NFS4ERR_INVAL. The destination
      offset or destination offset plus count may be greater than
      the size of the destination file. This allows for the client
      to issue parallel copies to implement operations such as
      "cat file1 file2 file3 file4 > dest".
    </t>

    <t>
      If the ca_source_server list is specified, then this is an inter-server
      copy operation and the source file is on a remote server.  The client
      is expected to have previously issued a successful COPY_NOTIFY request
      to the remote source server. The ca_source_server list MUST be the
      same as the COPY_NOTIFY response's cnr_source_server list. If the client
      includes the entries from the COPY_NOTIFY response's cnr_source_server
      list in the ca_source_server list, the source server can indicate a
      specific copy protocol for the destination server to use by returning
      a URL, which specifies both a protocol service and server name.
      Server-to-server copy protocol considerations are described in
      <xref target="sec:SSC-proto" /> and
      <xref target="sec:SSC-sec" />.
    </t>

    <t>
      The copying of any and all attributes on the source file is
      the responsibility of both the client and the copy protocol.
      Any attribute which is both exposed via the NFS protocol on
      the source file and set SHOULD be copied to the destination file.
      Any attribute supported by the destination server that is not
      set on the source file SHOULD be left unset. If the client
      cannot copy an attribute from the source to destination, it
      MAY fail the copy transaction.
    </t>

    <t>
      Metadata attributes not exposed via the NFS protocol SHOULD
      be copied to the destination file where appropriate via the
      copy protocol. Note that if the copy protocol is NFSv4.x, then
      these attributes will be lost.
    </t>

    <t>
      The destination file's named attributes are not duplicated
      from the source file. After the copy process completes, the
      client MAY attempt to duplicate named attributes using standard
      NFSv4 operations. However, the destination file's named
      attribute capabilities MAY be different from the source
      file's named attribute capabilities.
    </t>

    <t>
      If the operation does not result in an immediate failure, the
      server will return NFS4_OK, and the CURRENT_FH will remain
      the destination's filehandle.
    </t>

    <t>
      If an immediate failure does occur, cr_bytes_copied will be
      set to the number of bytes copied to the destination file before
      the error occurred. The cr_bytes_copied value indicates the number
      of bytes copied but not which specific bytes have been copied.
    </t>

    <t>
      A return of NFS4_OK indicates that either the operation is
      complete or the operation was initiated and a callback will
      be used to deliver the final status of the operation.
    </t>

    <t>
      If the wr_callback_id is returned, this indicates that the operation
      was initiated and a CB_OFFLOAD callback will deliver the final results
      of the operation. The wr_callback_id stateid is termed a copy stateid
      in this context. The server is given the option of returning the
      results in a callback because the data may require a relatively long
      period of time to copy.
    </t>

    <t>
      If no wr_callback_id is returned, the operation completed synchronously
      and no callback will be issued by the server. The completion status of
      the operation is indicated by cr_status.
    </t>

    <t>
      If the copy completes successfully, either synchronously or
      asynchronously, the data copied from the source file to the destination
      file MUST appear identical to the NFS client. However, the NFS server's
      on disk representation of the data in the source file and destination file
      MAY differ. For example, the NFS server might encrypt, compress,
      deduplicate, or otherwise represent the on disk data in the source and
      destination file differently.
    </t>
  </section>
</section>
