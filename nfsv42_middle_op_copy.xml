<!-- Copyright (C) The IETF Trust (2011-2014) -->
<!-- Copyright (C) The Internet Society (2011-2014) -->

<section anchor="op:copy" title="Operation 60: COPY - Initiate a server-side copy">
  <section toc='exclude' title="ARGUMENT">
    <t>
      &lt;CODE BEGINS&gt;
    </t>

    <?rfc include='autogen/copy_args.xml'?>

    <t>
      &lt;CODE ENDS&gt;
    </t>
  </section>

  <section toc='exclude' title="RESULT">
    <t>
      &lt;CODE BEGINS&gt;
    </t>

    <?rfc include='autogen/write_response4.xml'?>
    <?rfc include='autogen/copy_res.xml'?>

    <t>
      &lt;CODE ENDS&gt;
    </t>
  </section>

  <section toc='exclude' title="DESCRIPTION">
    <t>
      The COPY operation is used for both intra-server and inter-server
      copies. In both cases, the COPY is always sent from the client
      to the destination server of the file copy. The COPY operation
      requests that a range in the file specified by SAVED_FH
      is copied to a range in the file specified by CURRENT_FH.
    </t>

    <t>
      Both SAVED_FH and CURRENT_FH must be regular files. If either
      SAVED_FH or CURRENT_FH are not regular files, the operation
      MUST fail and return NFS4ERR_WRONG_TYPE.
    </t>

    <t>
      In order to set SAVED_FH to the source file handle, the
      compound procedure requesting the COPY will include a
      sub-sequence of operations such as
    </t>

    <figure>
      <artwork>
   PUTFH source-fh
   SAVEFH
      </artwork>
    </figure>

    <t>
      If the request is for an inter-server-to-server copy, the source-fh
      is a filehandle from the source server and the compound
      procedure is being executed on the destination server. In
      this case, the source-fh is a foreign filehandle on the server
      receiving the COPY request. If either PUTFH or SAVEFH checked
      the validity of the filehandle, the operation would likely
      fail and return NFS4ERR_STALE.
    </t>

    <t>
      If a server supports the inter-server-to-server COPY feature, a
      PUTFH followed by a SAVEFH MUST NOT return NFS4ERR_STALE for
      either operation. These restrictions do not pose substantial
      difficulties for servers. CURRENT_FH and SAVED_FH may be
      validated in the context of the operation referencing them
      and an NFS4ERR_STALE error returned for an invalid file handle
      at that point.
    </t>

    <t>
      The ca_dst_stateid MUST refer to either delegation, locking,
      or open states provided earlier by the server (see
      <xref target="ss:copy:lock" />). The order of selection is
      explained in Section 8.2.5 of <xref target='RFC5661' />.
      For an inter-server copy, the ca_src_stateid MUST be the
      cnr_stateid returned from the earlier COPY_NOTIFY operation,
      while for an intra-server copy ca_src_stateid MUST also
      refer to either delegation, locking, or open states provided
      earlier by the server. If either stateid is invalid, then the
      operation MUST fail.
    </t>

    <t>
      The ca_src_offset is the offset within the source file from
      which the data will be read, the ca_dst_offset is the offset
      within the destination file to which the data will be written,
      and the ca_count is the number of bytes that will be copied.
      An offset of 0 (zero) specifies the start of the file. A count
      of 0 (zero) requests that all bytes from ca_src_offset through
      EOF be copied to the destination. If concurrent modifications
      to the source file overlap with the source file region being
      copied, the data copied may include all, some, or none of the
      modifications. The client can use standard NFS operations
      (e.g., OPEN with OPEN4_SHARE_DENY_WRITE or mandatory byte
      range locks) to protect against concurrent modifications if
      the client is concerned about this. If the source file's end
      of file is being modified in parallel with a copy that specifies
      a count of 0 (zero) bytes, the amount of data copied is
      implementation dependent (clients may guard against this case
      by specifying a non-zero count value or preventing modification
      of the source file as mentioned above).
    </t>

    <t>
      If the source offset or the source offset plus count is greater
      than or equal to the size of the source file, the operation
      will fail with NFS4ERR_INVAL. The destination offset or
      destination offset plus count may be greater than the size
      of the destination file. This allows for the client to issue
      parallel copies to implement operations such as
    </t>

    <t>
      &lt;CODE BEGINS&gt;
    </t>

    <figure>
      <artwork>
   % cat file1 file2 file3 file4 > dest
      </artwork>
    </figure>

    <t>
      &lt;CODE ENDS&gt;
    </t>

    <t>
      If the ca_source_server list is specified, then this is an
      inter-server copy operation and the source file is on a remote
      server.  The client is expected to have previously issued a
      successful COPY_NOTIFY request to the remote source server.
      The ca_source_server list MUST be the same as the COPY_NOTIFY
      response's cnr_source_server list. If the client includes the
      entries from the COPY_NOTIFY response's cnr_source_server
      list in the ca_source_server list, the source server can
      indicate a specific copy protocol for the destination server
      to use by returning a URL, which specifies both a protocol
      service and server name.  Server-to-server copy protocol
      considerations are described in <xref target="sec:SSC-proto" />
      and <xref target="sec:SSC-sec" />.
    </t>

    <t>
      If ca_consecutive is set, then the client has specified that
      the copy protocol selected MUST copy bytes in consecutive
      order from ca_src_offset to ca_count. If the destination
      server cannot meet this requirement, then it MUST return
      an error of NFS4ERR_OFFLOAD_NO_REQS and set cr_consecutive
      to be false. Likewise, if ca_synchronous is set, then the
      client has required that the copy protocol selected MUST
      perform a synchronous copy. If the destination server
      cannot meet this requirement, then it MUST return an
      error of NFS4ERR_OFFLOAD_NO_REQS and set cr_synchronous
      to be false.
    </t>

    <t>
      If both are set by the client, then the destination SHOULD
      try to determine if it can respond to both requirements
      at the same time. If it cannot make that determination,
      it must set to false the one it can and set to true the
      other. The client, upon getting an NFS4ERR_OFFLOAD_NO_REQS
      error, has to examine both cr_consecutive and cr_synchronous
      against the respective values of ca_consecutive and
      ca_synchronous to determine the possible requirement
      not met. It MUST be prepared for the destination server
      not being able to determine both requirements at the same
      time.
    </t>

    <t>
      Upon receiving the NFS4ERR_OFFLOAD_NO_REQS error, the client has
      to determine if it wants to either re-request the copy with a
      relaxed set of requirements or if it wants to revert
      to manually copying the data. If it decides to manually
      copy the data and this is a remote copy, then the
      client is responsible for informing the source that the
      earlier COPY_NOTIFY is no longer valid by sending it
      an OFFLOAD_CANCEL.
    </t>

    <t>
      If the operation does not result in an immediate failure, the
      server will return NFS4_OK.
    </t>

    <t>
      If the wr_callback_id is returned, this indicates that the
      operation was initiated and a CB_OFFLOAD callback will deliver
      the final results of the operation. The wr_callback_id stateid
      is termed a copy stateid in this context. The server is given
      the option of returning the results in a callback because the
      data may require a relatively long period of time to copy.
    </t>

    <t>
      If no wr_callback_id is returned, the operation completed
      synchronously and no callback will be issued by the server. The
      completion status of the operation is indicated by cr_status.
    </t>

    <t>
      If the copy completes successfully, either synchronously or
      asynchronously, the data copied from the source file to the
      destination file MUST appear identical to the NFS client. However,
      the NFS server's on disk representation of the data in the source
      file and destination file MAY differ. For example, the NFS server
      might encrypt, compress, deduplicate, or otherwise represent the
      on disk data in the source and destination file differently.
    </t>

    <t>
      If a failure does occur for a synchronous copy, wr_count
      will be set to the number of bytes copied to the destination
      file before the error occurred. If cr_consecutive is true,
      then the bytes were copied in order. If the failure occurred
      for an asynchronous copy, then the client will have gotten
      the notification of the consecutive copy order when it got
      the copy stateid. It will be able to determine the bytes
      copied from the coa_bytes_copied in the CB_OFFLOAD argument.
    </t>

    <t>
      In either case, if cr_consecutive was not true, there is no
      assurance as to exactly which bytes in the range were copied.
      The client MUST assume that there exists a mixture of the
      original contents of the range and the new bytes. If the COPY
      wrote past the end of the file on the destination, then the
      last byte written to will determine the new file size. The
      contents of any block not written to and past the original
      size of the file will be as if a normal WRITE extended the
      file.
    </t>
  </section>
</section>
